---
apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: "${REPO_NAME}-template"
metadata:
  name: "${REPO_NAME}-backend-deployment"
objects:
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: "${APP_NAME}-${BRANCH}"
      name: "${APP_NAME}-backend-${BRANCH}"
    spec:
      replicas: ${{MIN_REPLICAS}}
      selector:
        matchLabels:
          app: "${APP_NAME}-${BRANCH}"
      strategy:
        type: RollingUpdate
      template:
        metadata:
          labels:
            app: "${APP_NAME}-${BRANCH}"
        spec:
          containers:
            - image: image-registry.openshift-image-registry.svc:5000/${NAMESPACE}/${REPO_NAME}-backend-${BRANCH}:${TAG}
              imagePullPolicy: Always
              envFrom:
                - configMapRef:
                    name: "${APP_NAME}-backend-config-map"
              volumeMounts:
                - name: tls-certs
                  mountPath: "/etc/tls-certs"
                  readOnly: true
                - name: log-storage
                  mountPath: /logs
              livenessProbe:
                initialDelaySeconds: 20
                failureThreshold: 5
                httpGet:
                  path: "/api/health"
                  port: 8080
                  scheme: HTTP
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              name: "${APP_NAME}-backend-${BRANCH}"
              ports:
                - containerPort: 8080
                  protocol: TCP
                - containerPort: 443
                  protocol: TCP
              readinessProbe:
                initialDelaySeconds: 10
                failureThreshold: 5
                httpGet:
                  path: "/api/health"
                  port: 8080
                  scheme: HTTP
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              resources:
                requests:
                  cpu: "${MIN_CPU}"
                  memory: "${MIN_MEM}"
                limits:
                  cpu: "${MAX_CPU}"
                  memory: "${MAX_MEM}"
            - image: artifacts.developer.gov.bc.ca/docker-remote/fluent/fluent-bit:1.5.7
              name: "${APP_NAME}-${BRANCH}-fluent-bit-sidecar"
              imagePullPolicy: Always
              imagePullSecrets:
                - name: artifactory-creds
              volumeMounts:
                - name: log-storage
                  mountPath: /mnt/log
                - name: flb-sc-config-volume
                  mountPath: /fluent-bit/etc/
              readinessProbe:
                tcpSocket:
                  port: 2020
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 5
                failureThreshold: 5
                successThreshold: 1
              livenessProbe:
                httpGet:
                  path: /
                  port: 2020
                initialDelaySeconds: 10
                periodSeconds: 30
                timeoutSeconds: 5
                failureThreshold: 5
                successThreshold: 1
              ports:
                - containerPort: 2020
                  protocol: TCP
                  name: metrics
              resources:
                requests:
                  cpu: "5m"
                  memory: "32Mi"
                limits:
                  cpu: "15m"
                  memory: "64Mi"
          volumes:
            - name: log-storage
              emptyDir: {}
            - name: tls-certs
              secret:
                secretName: "edx-backend-cert"
            - name: flb-sc-config-volume
              configMap:
                name: "${APP_NAME}-flb-sc-config-map"
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        service.alpha.openshift.io/serving-cert-secret-name: "edx-backend-cert"
      labels:
        app: "${APP_NAME}-${BRANCH}"
      name: "${APP_NAME}-backend-${BRANCH}"
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
        - name: 443-https
          port: 443
          protocol: TCP
          targetPort: 443
      selector:
        app: "${APP_NAME}-${BRANCH}"
  - apiVersion: autoscaling/v2
    kind: HorizontalPodAutoscaler
    metadata:
      name: "${APP_NAME}-backend-${BRANCH}-cpu-autoscaler"
    spec:
      scaleTargetRef:
        apiVersion: apps/v1
        kind: Deployment
        name: "${APP_NAME}-backend-${BRANCH}"
      minReplicas: ${{MIN_REPLICAS}}
      maxReplicas: ${{MAX_REPLICAS}}
      metrics:
        - type: Resource
          resource:
            name: cpu
            target:
              type: Utilization
              averageUtilization: 90
parameters:
  - name: REPO_NAME
    description: Application repository name
    required: true
  - name: BRANCH
    description: Job identifier (i.e. 'pr-5' OR 'master')
    required: true
  - name: NAMESPACE
    description: Target namespace reference (i.e. 'k8vopl-dev')
    required: true
  - name: APP_NAME
    description: Application name
    required: true
  - name: HOST_ROUTE
    description: The host the route will use to expose service outside cluster
    required: true
  - name: TAG
    description: The identifying tag for this specific deployment
    required: true
  - name: MIN_REPLICAS
    description: The minimum amount of replicas
    required: true
  - name: MAX_REPLICAS
    description: The maximum amount of replicas
    required: true
  - name: MIN_CPU
    description: The minimum amount of cpu
    required: true
  - name: MAX_CPU
    description: The maximum amount of cpu
    required: true
  - name: MIN_MEM
    description: The minimum amount of memory
    required: true
  - name: MAX_MEM
    description: The maximum amount of memory
    required: true