const passport = require('passport');
const express = require('express');
const router = express.Router();
const { getAssessmentSessions, getActiveAssessmentSessions, getAssessmentSessionsBySchoolYear, getAssessmentStudentsPaginated, getAssessmentStudentByID, updateAssessmentStudentByID, getAssessmentSpecialCases, removeAssessmentStudents, postAssessmentStudent, downloadXamFile, downloadAssessmentReport, downloadAssessmentStudentReport} = require('../components/assessments/assessments');
const auth = require('../components/auth');
const isValidBackendToken = auth.isValidBackendToken();
const { isValidUUIDParam, validateAccessToken, checkEdxUserPermission, findAssessmentStudentID_params, findAssessmentStudentIDs_body, loadRequestedAssessmentStudent, loadRequestedAssessmentStudents, checkCurrentUserAccessToRequestedAssessmentStudent, checkCurrentUserAccessToRequestedAssessmentStudents, checkCurrentUserAccessToSchoolSpecifiedOnAssessmentStudent, findSchoolID_params, checkEDXUserAccessToRequestedInstitute } = require('../components/permissionUtils');
const { PERMISSION } = require('../util/Permission');
const validate = require('../components/validator');
const {putStudentAssessmentSchema, postAssessmentStudentSchema} = require('../validations/assessments');

router.get('/assessment-sessions/district', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_DIS_EDIT), getAssessmentSessions);
router.get('/assessment-sessions/school', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_SCH_EDIT), getAssessmentSessions);
router.get('/assessment-sessions/district/active', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_DIS_EDIT), getActiveAssessmentSessions);
router.get('/assessment-sessions/school/active', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_SCH_EDIT), getActiveAssessmentSessions);
router.get('/assessment-sessions/district/school-year/:schoolYear', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_DIS_EDIT), getAssessmentSessionsBySchoolYear);
router.get('/assessment-sessions/school/school-year/:schoolYear', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_SCH_EDIT), getAssessmentSessionsBySchoolYear);

router.post('/assessment-registrations/district/students', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_DIS_EDIT), validate(postAssessmentStudentSchema), checkCurrentUserAccessToSchoolSpecifiedOnAssessmentStudent, postAssessmentStudent);
router.post('/assessment-registrations/school/students', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_SCH_EDIT), validate(postAssessmentStudentSchema), checkCurrentUserAccessToSchoolSpecifiedOnAssessmentStudent, postAssessmentStudent);
router.get('/assessment-registrations/district/students/paginated', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_DIS_EDIT), getAssessmentStudentsPaginated);
router.get('/assessment-registrations/school/students/paginated', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_SCH_EDIT), getAssessmentStudentsPaginated);
router.get('/assessment-registrations/district/students/:assessmentStudentID', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_DIS_EDIT), findAssessmentStudentID_params, loadRequestedAssessmentStudent, checkCurrentUserAccessToRequestedAssessmentStudent, getAssessmentStudentByID);
router.get('/assessment-registrations/school/students/:assessmentStudentID', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_SCH_EDIT), findAssessmentStudentID_params, loadRequestedAssessmentStudent, checkCurrentUserAccessToRequestedAssessmentStudent, getAssessmentStudentByID);
router.put('/assessment-registrations/district/students/:assessmentStudentID', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_DIS_EDIT), validate(putStudentAssessmentSchema), findAssessmentStudentID_params, loadRequestedAssessmentStudent, checkCurrentUserAccessToRequestedAssessmentStudent, checkCurrentUserAccessToSchoolSpecifiedOnAssessmentStudent, updateAssessmentStudentByID);
router.put('/assessment-registrations/school/students/:assessmentStudentID', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_SCH_EDIT), validate(putStudentAssessmentSchema), findAssessmentStudentID_params, loadRequestedAssessmentStudent, checkCurrentUserAccessToRequestedAssessmentStudent, checkCurrentUserAccessToSchoolSpecifiedOnAssessmentStudent, updateAssessmentStudentByID);
router.post('/assessment-registrations/district/students/remove', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_DIS_EDIT), findAssessmentStudentIDs_body, loadRequestedAssessmentStudents, checkCurrentUserAccessToRequestedAssessmentStudents, removeAssessmentStudents);
router.post('/assessment-registrations/school/students/remove', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_SCH_EDIT), findAssessmentStudentIDs_body, loadRequestedAssessmentStudents, checkCurrentUserAccessToRequestedAssessmentStudents, removeAssessmentStudents);

router.get('/assessment-specialcase-types', passport.authenticate('jwt', {session: false}, undefined), isValidBackendToken, validateAccessToken,  getAssessmentSpecialCases);

router.get('/reports/district/:sessionID/school/:schoolID/xam/download', auth.refreshJWT, isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_DIS_EDIT), findSchoolID_params, checkEDXUserAccessToRequestedInstitute, downloadXamFile);
router.get('/reports/school/:sessionID/school/:schoolID/xam/download', auth.refreshJWT, isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_SCH_EDIT), findSchoolID_params, checkEDXUserAccessToRequestedInstitute, downloadXamFile);
router.get('/reports/district/:sessionID/school/:schoolID/:reportTypeCode/download', auth.refreshJWT, isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_DIS_EDIT), findSchoolID_params, checkEDXUserAccessToRequestedInstitute, downloadAssessmentReport);
router.get('/reports/school/:sessionID/school/:schoolID/:reportTypeCode/download', auth.refreshJWT, isValidBackendToken, validateAccessToken, checkEdxUserPermission(PERMISSION.EAS_SCH_EDIT), findSchoolID_params, checkEDXUserAccessToRequestedInstitute, downloadAssessmentReport);
router.get('/reports/student/:studentID/:reportTypeCode/download', auth.refreshJWT, isValidBackendToken, validateAccessToken, isValidUUIDParam('studentID'), checkEdxUserPermission(PERMISSION.EAS_SCH_EDIT), downloadAssessmentStudentReport);

module.exports = router;
