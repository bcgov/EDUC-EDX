name: Deploy to TEST

env:
  # 🖊️ EDIT your repository secrets to log into your OpenShift cluster and set up the context.
  # See https://github.com/redhat-actions/oc-login#readme for how to retrieve these values.
  # To get a permanent token, refer to https://github.com/redhat-actions/oc-login/wiki/Using-a-Service-Account-for-GitHub-Actions
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  # 🖊️ EDIT to set the kube context's namespace after login. Leave blank to use your user's default namespace.
  OPENSHIFT_NAMESPACE: ${{ secrets.EDX_NAMESPACE_NO_ENV }}-test
  PEN_NAMESPACE: ${{ secrets.PEN_NAMESPACE_NO_ENV }}-test
  GRAD_DATA_COLLECTION_NAMESPACE: ${{ secrets.GRAD_DATA_COLLECTION_NAMESPACE_NO_ENV }}-test
  ASSESSMENT_NAMESPACE: ${{ secrets.ASSESSMENT_NAMESPACE_NO_ENV }}-test

  SPLUNK_TOKEN: ${{ secrets.SPLUNK_TOKEN }}

  CA_CERT: ${{ secrets.CA_CERT }}
  CERTIFICATE: ${{ secrets.CERT }}
  PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}

  # 🖊️ EDIT to change the image registry settings.
  # Registries such as GHCR, Quay.io, and Docker Hub are supported.
  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ github.token }}

  IMAGE_NAME: edx-backend-master

  APP_NAME: 'edx'
  REPO_NAME: "educ-edx"
  BRANCH: "master"
  APP_NAME_BACKEND: "edx-backend-master"
  APP_NAME_FRONTEND: "edx-frontend"
  APP_NAME_FRONTEND_MASTER: "edx-frontend-master"
  APP_NAME_FRONTEND_STATIC: "edx-frontend-static"
  NAMESPACE: ${{ secrets.EDX_NAMESPACE_NO_ENV }}
  NAMESPACE_TOOLS: ${{ secrets.EDX_NAMESPACE_NO_ENV }}-tools
  COMMON_NAMESPACE: ${{ secrets.COMMON_NAMESPACE_NO_ENV }}
  TARGET_ENV: "test"
  MIN_REPLICAS: "2"
  MAX_REPLICAS: "3"
  MIN_CPU: "300m"
  MAX_CPU: "600m"
  MIN_MEM: "250Mi"
  MAX_MEM: "500Mi"
  # SITE_URL should have no scheme or port. It will be prepended with https://
  HOST_ROUTE: ${{ secrets.SITE_URL }}

on:
  # https://docs.github.com/en/actions/reference/events-that-trigger-workflows
  workflow_dispatch:

jobs:
  openshift-ci-cd:
    name: Build and deploy to TEST
    # ubuntu-latest can also be used.
    runs-on: ubuntu-22.04
    environment: test

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
    - name: Check for required secrets
      uses: actions/github-script@v6
      with:
        script: |
          const secrets = {
            OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
            OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
          };

          const GHCR = "ghcr.io";
          if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
            core.info(`Image registry is ${GHCR} - no registry password required`);
          }
          else {
            core.info("A registry password is required");
            secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
          }

          const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
            if (value.length === 0) {
              core.error(`Secret "${name}" is not set`);
              return true;
            }
            core.info(`✔️ Secret "${name}" is set`);
            return false;
          });

          if (missingSecrets.length > 0) {
            core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
              "You can add it using:\n" +
              "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
              "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
              "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
          }
          else {
            core.info(`✅ All the required secrets are set`);
          }

    - name: Check out repository
      uses: actions/checkout@v3

    - name: Get latest tag
      uses: actions-ecosystem/action-get-latest-tag@v1
      id: get-latest-tag

    - name: Install oc
      uses: redhat-actions/openshift-tools-installer@v1
      with:
        oc: 4

      # https://github.com/redhat-actions/oc-login#readme
    - uses: actions/checkout@v3
    - name: Deploy
      run: |
        set -eux
        # Login to OpenShift and select project
        oc login --token=${{ env.OPENSHIFT_TOKEN }} --server=${{ env.OPENSHIFT_SERVER }}
        oc project ${{ env.OPENSHIFT_NAMESPACE }}
        # Cancel any rollouts in progress
        oc rollout cancel deployment/${{ env.IMAGE_NAME }} 2> /dev/null || true && echo "No rollout in progress"
        
        # Tag frontend static image from dev to test
        oc tag ${{ env.NAMESPACE }}-dev/${{ env.REPO_NAME }}-frontend-static:${{ steps.get-latest-tag.outputs.tag }} ${{ env.NAMESPACE }}-test/${{ env.REPO_NAME }}-frontend-static:${{ steps.get-latest-tag.outputs.tag }}
        # Deploy frontend static
        oc process -f tools/openshift/frontend-static.deployment.yaml \
          -p APP_NAME=${{ env.APP_NAME }} \
          -p REPO_NAME=${{ env.REPO_NAME }} \
          -p BRANCH=${{ env.BRANCH }} \
          -p NAMESPACE=${{ env.OPENSHIFT_NAMESPACE }} \
          -p TAG=${{ steps.get-latest-tag.outputs.tag }} \
          -p MIN_REPLICAS=${{ env.MIN_REPLICAS }} \
          -p MAX_REPLICAS=${{ env.MAX_REPLICAS }} \
          -p MIN_CPU=${{ env.MIN_CPU }} \
          -p MAX_CPU=${{ env.MAX_CPU }} \
          -p MIN_MEM=${{ env.MIN_MEM }} \
          -p MAX_MEM=${{ env.MAX_MEM }} \
          -p HOST_ROUTE=${{ env.HOST_ROUTE }} \
          -p CA_CERT="${{ env.CA_CERT }}" \
          -p CERTIFICATE="${{ env.CERTIFICATE }}" \
          -p PRIVATE_KEY="${{ env.PRIVATE_KEY }}" \
        | oc apply -f -
        
        # Tag backend image from dev to test
        oc tag ${{ env.NAMESPACE }}-dev/${{ env.REPO_NAME }}-backend-${{ env.BRANCH }}:${{ steps.get-latest-tag.outputs.tag }} ${{ env.NAMESPACE }}-test/${{ env.REPO_NAME }}-backend-${{ env.BRANCH }}:${{ steps.get-latest-tag.outputs.tag }}
        # Deploy backend
        oc process -f tools/openshift/backend.deployment.yaml \
          -p APP_NAME=${{ env.APP_NAME }} \
          -p REPO_NAME=${{ env.REPO_NAME }} \
          -p BRANCH=${{ env.BRANCH }} \
          -p NAMESPACE=${{ env.OPENSHIFT_NAMESPACE }} \
          -p TAG=${{ steps.get-latest-tag.outputs.tag }} \
          -p MIN_REPLICAS=${{ env.MIN_REPLICAS }} \
          -p MAX_REPLICAS=${{ env.MAX_REPLICAS }} \
          -p MIN_CPU=${{ env.MIN_CPU }} \
          -p MAX_CPU=${{ env.MAX_CPU }} \
          -p MIN_MEM=${{ env.MIN_MEM }} \
          -p MAX_MEM=${{ env.MAX_MEM }} \
          -p HOST_ROUTE=${{ env.HOST_ROUTE }} \
        | oc apply -f -
        
        # Update configmaps and set env
        curl -s https://raw.githubusercontent.com/bcgov/${{ env.REPO_NAME }}/${{ steps.get-latest-tag.outputs.tag }}/tools/config/update-configmap.sh | bash /dev/stdin ${{ env.TARGET_ENV }} ${{ env.APP_NAME }} ${{ env.NAMESPACE }} ${{ env.COMMON_NAMESPACE }} ${{ env.PEN_NAMESPACE }} ${{ env.GRAD_DATA_COLLECTION_NAMESPACE }} ${{ env.ASSESSMENT_NAMESPACE }} ${{ env.SPLUNK_TOKEN }}
        
        # Restart and wait for backend rollout
        oc rollout restart deployment/${{ env.IMAGE_NAME }}
        oc rollout status deployment/${{ env.IMAGE_NAME }}
        # Restart and wait for frontend static rollout
        oc rollout restart deployment/${{ env.APP_NAME_FRONTEND_MASTER }}
        oc rollout status deployment/${{ env.APP_NAME_FRONTEND_MASTER }}
        
        echo "--- Backend Logs ---"
        oc logs deployment/${{ env.IMAGE_NAME }} --tail=100
        echo "--- Frontend Logs ---"
        oc logs deployment/${{ env.APP_NAME_FRONTEND_MASTER }} --tail=100

#    - name: ZAP Scan
#      uses: zaproxy/action-full-scan@v0.7.0
#      with:
#        target: 'https://${{ env.HOST_ROUTE }}'
